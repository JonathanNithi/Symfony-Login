<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $encryptedPassword
 * @property string $employee_id
 * @property Employee $Employee
 * 
 * @method string   getUsername()          Returns the current record's "username" value
 * @method string   getEncryptedPassword() Returns the current record's "encryptedPassword" value
 * @method string   getEmployeeId()        Returns the current record's "employee_id" value
 * @method Employee getEmployee()          Returns the current record's "Employee" value
 * @method User     setUsername()          Sets the current record's "username" value
 * @method User     setEncryptedPassword() Sets the current record's "encryptedPassword" value
 * @method User     setEmployeeId()        Sets the current record's "employee_id" value
 * @method User     setEmployee()          Sets the current record's "Employee" value
 * 
 * @package    project
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('username', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '40',
             ));
        $this->hasColumn('encryptedPassword', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('employee_id', 'string', 10, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '10',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Employee', array(
             'local' => 'employee_id',
             'foreign' => 'e_id',
             'onDelete' => 'CASCADE'));
    }
}